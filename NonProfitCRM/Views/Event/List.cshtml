@model IQueryable<NonProfitCRM.Models.ViewEventList>
@{
    ViewBag.PreTitle = "seznam";
    ViewBag.Title = "Akcí";
    ViewBag.PathTitle = "seznam";
}

<section class="widget">
    <header>
        <h4>
            @Html.ActionLink("Vytvořit", "Create", "Event", new { returnUrl = Request.RawUrl }, new { @class = "btn-sm btn-success" })
        </h4>
        <div class="widget-controls">
            @using (Html.BeginForm(null, null, FormMethod.Get))
            {
                <table border="0">
                    <tr>
                        <td>
                            <div class='btn btn-sm bg-gray text-white'><a class="text-white" title="Zobrazovat aktivní" onclick="handleIsActiveOn(); window.location.reload();" href="#"><i id="myActiveShow" class="fa fa-circle-thin fa-lg"></i><span class="hidden-xs hidden-sm">&nbsp; pouze </span>aktivní</a></div>
                            &nbsp;
                        </td>
                        <td style="min-width: 250px" class="hidden-xs hidden-sm">
                            <input id="tags" name="tags" class="form-control" type="text"
                                value="@Request.QueryString["tags"]" data-role="tagsinput" />
                        </td>
                        <td>
                            <div class="width-200">
                                <div class="input-group input-group-sm input-group-transparent input-group-rounded">
                                    <input type="search" name="search" value="@Request.QueryString["search"]" class="form-control"
                                           placeholder="hledání ...">
                                    <span class="input-group-btn">
                                        <button type="submit" class="btn btn-primary">&nbsp;&nbsp;&nbsp;Hledej!</button>
                                    </span>
                                </div>
                            </div>
                        </td>
                    </tr>
                </table>                
            }
        </div>

    </header>
    <div class="widget-body">
        @{
            var grid = new NonProfitCRM.Components.ASWebGrid(Model);
        }
        @grid.Draw(columns: grid.Columns(
         grid.Column("Id", "#"),
         grid.Column("DateOfEvent", "Datum", format: @<text>@Html.ActionLink((string)NonProfitCRM.Components.DateHelper.FormatDateShort(item.DateOfEvent, User.Identity.Name),
"Detail", "Event", new { id = item.Id, returnUrl = Request.RawUrl }, null)</text>, style: "tdnowrap"),
                 grid.Column("Capacity", "Účast"),
                 grid.Column("CompanyName", "Firma"),
                 grid.Column("NonProfitOrgName", "Neziskovka", style: "hidden-xs hidden-sm"),
                 grid.Column("EventTypeName", "Typ", style: "hidden-xs hidden-sm"),
                 grid.Column("TaskName", "Úkol", 
                 format: @<text>
                    @{if (item.TaskName=="")
                                 {<span>-</span>}
                      else if (item.TaskName.StartsWith("~"))
                                 {<span class="label label-danger">@item.TaskName.Substring(1)</span>}
                                 else
                                 {<span class="label label-success">@item.TaskName</span>}
                    }</text>
                 ,style: "hidden-xs hidden-sm"),
                 grid.Column("Insurance", "Pojistit", 
                 format: @<text>
                    @{if (item.Insurance)
                                 {<span class="label label-primary">ano</span>}
                                 else
                                 {<span class="label label-default">ne</span>}
                    }</text>
                 ,style: "hidden-xs hidden-sm"),
                 grid.Column("StatusId", "Stav", format: @<text>
                    @{if (item.Closed == null)
                                 {<span class="label label-success">aktivní</span>}
                                 else
                                 {<span class="label label-default">ukončená</span>}
                    }</text>),
                     grid.Column("Deleted", ".", format: @<text>
                        @{if (item.Deleted)
                                     {<span class="label label-danger">smazáno</span>}
                        }</text>)
                         ))
    </div>
</section>


<script>
    var tagsadapter = new Bloodhound({
        datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
        queryTokenizer: Bloodhound.tokenizers.whitespace,
        prefetch: {
            url: '/api/Rest/Tag?guid=' + createGUID(),
            filter: function (list) {
                return $.map(list, function (tagname) {
                    return { name: tagname };
                });
            }
        }
    });
    tagsadapter.initialize();

    $('#tags').tagsinput({
        typeaheadjs: {
            name: 'tags',
            displayKey: 'name',
            valueKey: 'name',
            source: tagsadapter.ttAdapter()
        }
    });

    $(document).ready(function () {
        drawIsActiveOn();
    });

    function drawIsActiveOn() {
        var IsMyTaskOn = getCookie("eventActiveOn");
        if (IsMyTaskOn === "true") {
            $("#myActiveShow").removeClass('fa-circle-thin').addClass('fa-check-circle');
        } else {
            $("#myActiveShow").removeClass('fa-check-circle').addClass('fa-circle-thin');
        }
    }

    function handleIsActiveOn() {
        var IsMyTaskOn = getCookie("eventActiveOn");
        if (IsMyTaskOn === "true") {
            setCookie('eventActiveOn', 'false', 2000);
        } else {
            setCookie('eventActiveOn', 'true', 2000);
        }
        drawIsActiveOn();
    }

</script>
