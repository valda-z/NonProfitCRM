@model NonProfitCRM.Models.Company
@{
    /**/

    if (Model.Id == 0)
    {
        ViewBag.PreTitle = "nová";
        ViewBag.Title = "Firma";
    }
    else
    {
        ViewBag.PreTitle = "detail";
        ViewBag.Title = "Firmy";
    }
    ViewBag.PathTitle = "seznam Firem >";
}

<section class="widget">
    <header></header>
    <div class="widget-body">
        @using (Html.BeginForm(null, null, new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post,
            new
            {
                @class = "form-horizontal",
                @data_parsley_priority_enabled = "false",
                @novalidate = "novalidate",
                @id = "validation-form"
            }))
        {
            @Html.HiddenFor(m => m.Id)
        <fieldset>
            <legend>Detail neziskovky: <span class="fw-semi-bold">@Model.Name</span></legend>
            @Html.Partial("_ValidationSummary", ViewData.ModelState)
            <div class="form-group">
                @Html.LabelFor(m => m.Id, "Tagy", new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    <input id="tags" name="tags" class="form-control" type="text" value="@ViewBag.tags" data-role="tagsinput" />
                </div>
                @Html.LabelFor(m => m.Insurance, "Pojištění", new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    <div class="checkbox-inline checkbox-ios checkbox-ios-notready">
                        <label for="checkbox-ios1-insurance">
                            <input value="true" type="checkbox" id="checkbox-ios1-insurance" name="Insurance" @Html.Raw(Model.Insurance ? "checked" : "") />
                        </label>
                    </div>
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Name, "Název", new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(m => m.Name, new { @class = "form-control", @required = "required" })
                </div>
                @Html.LabelFor(m => m.IdentificationNumber, "IČ", new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(m => m.IdentificationNumber, new { @class = "form-control", @required = "required", @pattern = "[0-9]{8,16}" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.StatusId, "Stav", new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    <div class="btn-group" data-toggle="buttons">
                        <label class="btn btn-default @Html.Raw(Model.StatusId==((int)NonProfitCRM.Components.CompanyStatusHelper.Status.COMPANY_APPL)?"active":"")">
                            <input type="radio" value="0" name="StatusId" id="StatusId_0" autocomplete="off" @Html.Raw(Model.StatusId == ((int)NonProfitCRM.Components.CompanyStatusHelper.Status.COMPANY_APPL) ? "checked" : "")> aplikace
                        </label>
                        <label class="btn btn-default @Html.Raw(Model.StatusId==((int)NonProfitCRM.Components.CompanyStatusHelper.Status.COMPANY_ADHOC)?"active":"")">
                            <input type="radio" value="10" name="StatusId" id="StatusId_10" autocomplete="off" @Html.Raw(Model.StatusId == ((int)NonProfitCRM.Components.CompanyStatusHelper.Status.COMPANY_ADHOC) ? "checked" : "")> adhoc
                        </label>
                        <label class="btn btn-default @Html.Raw(Model.StatusId==((int)NonProfitCRM.Components.CompanyStatusHelper.Status.LEAD)?"active":"")">
                            <input type="radio" value="1" name="StatusId" id="StatusId_1" autocomplete="off" @Html.Raw(Model.StatusId == ((int)NonProfitCRM.Components.CompanyStatusHelper.Status.LEAD) ? "checked" : "")> lead
                        </label>
                        <label class="btn btn-default @Html.Raw(Model.StatusId==((int)NonProfitCRM.Components.CompanyStatusHelper.Status.LEADDEAD)?"active":"")">
                            <input type="radio" value="-1" name="StatusId" id="StatusId_m1" autocomplete="off" @Html.Raw(Model.StatusId == ((int)NonProfitCRM.Components.CompanyStatusHelper.Status.LEADDEAD) ? "checked" : "")> neaktivní
                        </label>
                    </div>
                </div>
                @Html.LabelFor(m => m.Www, "WWW stránky", new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(m => m.Www, new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.CountryId, "Země", new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(m => m.CountryId,
                        new SelectList(new NonProfitCRM.Models.Entities().Country.OrderBy(e => e.Name), "Id", "Name", Model.CountryId),
                        new { @data_placeholder = "Vyber zemi", @class = "select2 form-control", @tabindex = "-1" })
                </div>
                @Html.LabelFor(m => m.RegionId, "Kraj", new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(m => m.RegionId,
                        new SelectList(new NonProfitCRM.Models.Entities().Region.OrderBy(e => e.Name), "Id", "Name", Model.RegionId),
                        new { @data_placeholder = "Vyber kraj", @class = "select2 form-control", @tabindex = "-1" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.City, "Město", new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(m => m.City, new { @class = "form-control", @required = "required" })
                </div>
                @Html.LabelFor(m => m.Address, "Adresa", new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(m => m.Address, new { @class = "form-control" })
                </div>
            </div>
            <legend>Hlavní kontakt</legend>
            <div class="form-group">
                @Html.LabelFor(m => m.Contact1Name, "Jméno", new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(m => m.Contact1Name, new { @class = "form-control" })
                </div>
                @Html.LabelFor(m => m.Contact1Note, "Poznámka", new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(m => m.Contact1Note, new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Contact1Phone, "Telefon", new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(m => m.Contact1Phone, new { @class = "form-control" })
                </div>
                @Html.LabelFor(m => m.Contact1Email, "Email", new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(m => m.Contact1Email, new { @class = "form-control" })
                </div>
            </div>
            <legend>Kontakt 2</legend>
            <div class="form-group">
                @Html.LabelFor(m => m.Contact2Name, "Jméno", new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(m => m.Contact2Name, new { @class = "form-control" })
                </div>
                @Html.LabelFor(m => m.Contact2Note, "Poznámka", new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(m => m.Contact2Note, new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Contact2Phone, "Telefon", new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(m => m.Contact2Phone, new { @class = "form-control" })
                </div>
                @Html.LabelFor(m => m.Contact2Email, "Email", new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(m => m.Contact2Email, new { @class = "form-control" })
                </div>
            </div>
            <legend>Poznámka</legend>
            <div class="form-group">
                @Html.LabelFor(m => m.FirstContact, "První kontakt", new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    <div id="datetimepicker-start" class="input-group">
                        @Html.TextBox("FirstContactRaw", NonProfitCRM.Components.DateHelper.FormatDateShort(Model.FirstContact, NonProfitCRM.Components.SystemHelper.GetUserName)
                            , new
                            {
                                @class = "form-control",
                                @id = "datetimepicker-starti",
                                @pattern = NonProfitCRM.Components.DateHelper.ValidatorStringDate
                            })
                        <span class="input-group-btn">
                            <a href="#" class="btn btn-success">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </a>
                        </span>
                    </div>
                </div>
                @Html.LabelFor(m => m.ContactPerson, "Kontakt u nás", new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(m => m.ContactPerson, new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-12">
                    @Html.TextAreaFor(m => m.Note, new { @class = "form-control", @rows = "3" })
                </div>
            </div>
        </fieldset>
        <div class="btn-toolbar">
            <a href="@ViewBag.ReturnUrl" class="btn btn btn-default pull-right">Zpět</a>
            <button type="submit" name="save" class="btn btn btn-primary pull-right">Uložit</button>
            @if (Model.Id == 0)
            {
                <button type="submit" name="saveandtask" value="true" class="btn btn btn-primary pull-right">Uložit a zadat úkoly</button>
            }
            @if (Model.Id != 0 && ViewBag.CanEdit)
            {
                <a class="btn btn btn-danger" data-href="@Url.Action("Delete", "Company", new { id = Model.Id, returnUrl = ViewBag.ReturnUrl })" data-toggle="modal" data-target="#confirm-delete">
                    Smazat
                </a>
            }
        </div>
        }
    </div>
</section>

@if (Model.Id > 0)
{
    <div class="row mb-lg">
        <div class="col-md-12">
            <div class="clearfix">
                <ul id="tabs1" class="nav nav-tabs pull-left">
                    <li class="active">
                        <a href="#tab1" data-toggle="tab">Úkoly</a>
                    </li>
                </ul>
                <div>
                    <a class="btn btn btn-success  pull-right" href="@Url.Action("Detail", "Task",
                       new { id = 0, entityid = Model.Id, entity = "Company", returnUrl = Request.RawUrl })">
                        Nový úkol
                    </a>
                </div>
            </div>
            <div id="tabs1c" class="tab-content mb-lg">
                <div class="tab-pane active clearfix" id="tab1">
                    @Html.Partial("_TaskList",
                        new NonProfitCRM.Models.Entities().Task.
                            Where( e => e.EntityId == Model.Id && e.Entity == "Company").
                            OrderByDescending(e => e.DueDate))
                </div>
            </div>
        </div>
    </div>
}

@Html.Partial("_ConfirmDialog")

@Scripts.Render("~/Content/sing/vendor/form-js")
@Html.Partial("_ParsleyLoader", "validation-form")

@Html.Partial("_ReadonlyScript", (bool)ViewBag.CanEdit)

@{
    System.Text.StringBuilder sb = new System.Text.StringBuilder();
    sb.Append("var optRegionData = [ ");
    foreach (var obj in new NonProfitCRM.Models.Entities().Region.OrderBy(e => e.Name).ToList())
    {
        sb.AppendFormat("{{ countryid:{1}, regionid:{0}, name: \"{2}\" }},", obj.Id, obj.CountryId, obj.Name);
    }
    sb.Append(" ];");
}

<script>
    $(document).ready(function () {

        //first, detect when initial DD changes
        $("#CountryId").change(function () {
            //get what they selected
            var selected = $("option:selected", this).val();
            changeRegions(selected);
        });

        $('#datetimepicker-start').datetimepicker({
            format: 'YYYY-MM-DD'
        });

        $("#parsley-id-multiple-StatusId").hide();

        new Switchery(document.getElementById('checkbox-ios1-insurance'), { color: Sing.colors['brand-success'], size: 'small' });
        $('.checkbox-ios-notready').each(function (i, elem) { $(elem).removeClass('checkbox-ios-notready') });
    });

    @Html.Raw(sb.ToString());

    function changeRegions(regid) {
        //no matter what, clear the other DD
        $("#RegionId").children().remove().end();
        var newoptions = "";
        var firstregion = 0;
        for (var i = 0; i < optRegionData.length; i++) {
            if (optRegionData[i].countryid == regid) {
                if (firstregion == 0) firstregion = optRegionData[i].regionid;
                newoptions += "<option value=\"" + optRegionData[i].regionid + "\">" + optRegionData[i].name + "</option>";
            }
        }
        $("#RegionId").children().end().append(newoptions);
        if (regid == @Model.CountryId) {
            $("#RegionId").val(@Model.RegionId).change();
        } else {
            $("#RegionId").val(firstregion).change();
        }
    }

    changeRegions($("#CountryId").val());
</script>

<script>
    var tagsadapter = new Bloodhound({
        datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
        queryTokenizer: Bloodhound.tokenizers.whitespace,
        prefetch: {
            url: '/api/Rest/Tag?guid=' + createGUID(),
            filter: function (list) {
                return $.map(list, function (tagname) {
                    return { name: tagname };
                });
            }
        }
    });
    tagsadapter.initialize();

    $('#tags').tagsinput({
        typeaheadjs: {
            name: 'tags',
            displayKey: 'name',
            valueKey: 'name',
            source: tagsadapter.ttAdapter()
        }
    });
</script>
