/*
* MIT License
* 
* Copyright (c) 2015 - present valda-z
* 
* All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NonProfitCRM.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C_Version> C_Version { get; set; }
        public virtual DbSet<Company> Company { get; set; }
        public virtual DbSet<CompanyStatus> CompanyStatus { get; set; }
        public virtual DbSet<CompanySub> CompanySub { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<Event> Event { get; set; }
        public virtual DbSet<Event2CompanySub> Event2CompanySub { get; set; }
        public virtual DbSet<Group> Group { get; set; }
        public virtual DbSet<Log> Log { get; set; }
        public virtual DbSet<NonProfitOrg> NonProfitOrg { get; set; }
        public virtual DbSet<Region> Region { get; set; }
        public virtual DbSet<Tag> Tag { get; set; }
        public virtual DbSet<Tag2Company> Tag2Company { get; set; }
        public virtual DbSet<Tag2Event> Tag2Event { get; set; }
        public virtual DbSet<Tag2NonProfitOrg> Tag2NonProfitOrg { get; set; }
        public virtual DbSet<Task> Task { get; set; }
        public virtual DbSet<TaskStatus> TaskStatus { get; set; }
        public virtual DbSet<ViewUserProfileList> ViewUserProfileList { get; set; }
        public virtual DbSet<ViewNonProfitOrgList> ViewNonProfitOrgList { get; set; }
        public virtual DbSet<ViewCompanyList> ViewCompanyList { get; set; }
        public virtual DbSet<ViewEventList> ViewEventList { get; set; }
        public virtual DbSet<ViewTaskList> ViewTaskList { get; set; }
    
        public virtual ObjectResult<Nullable<int>> CloseDelivery(Nullable<int> deliveryId, Nullable<int> distributorId, Nullable<int> customerId)
        {
            var deliveryIdParameter = deliveryId.HasValue ?
                new ObjectParameter("DeliveryId", deliveryId) :
                new ObjectParameter("DeliveryId", typeof(int));
    
            var distributorIdParameter = distributorId.HasValue ?
                new ObjectParameter("DistributorId", distributorId) :
                new ObjectParameter("DistributorId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CloseDelivery", deliveryIdParameter, distributorIdParameter, customerIdParameter);
        }
    
        public virtual int SaveRobotTypeDependencies(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveRobotTypeDependencies", idParameter);
        }
    
        [DbFunction("Entities", "FunctionCUActivationWillExpire")]
        public virtual IQueryable<FunctionCUActivationWillExpire_Result> FunctionCUActivationWillExpire(Nullable<int> daysback)
        {
            var daysbackParameter = daysback.HasValue ?
                new ObjectParameter("daysback", daysback) :
                new ObjectParameter("daysback", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FunctionCUActivationWillExpire_Result>("[Entities].[FunctionCUActivationWillExpire](@daysback)", daysbackParameter);
        }
    
        [DbFunction("Entities", "FunctionCUAuthSWWillExpire")]
        public virtual IQueryable<FunctionCUAuthSWWillExpire_Result> FunctionCUAuthSWWillExpire(Nullable<int> daysback, Nullable<int> swid)
        {
            var daysbackParameter = daysback.HasValue ?
                new ObjectParameter("daysback", daysback) :
                new ObjectParameter("daysback", typeof(int));
    
            var swidParameter = swid.HasValue ?
                new ObjectParameter("swid", swid) :
                new ObjectParameter("swid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FunctionCUAuthSWWillExpire_Result>("[Entities].[FunctionCUAuthSWWillExpire](@daysback, @swid)", daysbackParameter, swidParameter);
        }
    
        [DbFunction("Entities", "FunctionRobotPWSWarrantyWillExpire")]
        public virtual IQueryable<FunctionRobotPWSWarrantyWillExpire_Result1> FunctionRobotPWSWarrantyWillExpire(Nullable<int> daysback)
        {
            var daysbackParameter = daysback.HasValue ?
                new ObjectParameter("daysback", daysback) :
                new ObjectParameter("daysback", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FunctionRobotPWSWarrantyWillExpire_Result1>("[Entities].[FunctionRobotPWSWarrantyWillExpire](@daysback)", daysbackParameter);
        }
    }
}
